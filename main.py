import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import re
from datetime import datetime, timedelta
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
from database import add_note, find_notes_by_user_and_hashtag, get_upcoming_reminders, get_all_notes_for_user, update_note_reminder_date
import asyncio 
import os
from flask import Flask, request
import threading

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è Render.com)
web_app = Flask(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@web_app.route('/health')
def health_check():
    """–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è Render.com, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å."""
    return 'OK', 200 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º "OK" —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 200

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger(__name__).setLevel(logging.INFO)
logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. "
        "–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç. "
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π #—Ö–µ—à—Ç–µ–≥. "
        "–î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: '—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ #—Ç–µ–≥ #–¥—Ä—É–≥–æ–π_—Ç–µ–≥ @–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú'.\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –∫–∞–Ω–∞–ª, **–∑–∞ 24 —á–∞—Å–∞ –¥–æ —Å–æ–±—ã—Ç–∏—è**.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/find #—Ö–µ—à—Ç–µ–≥ - –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ö–µ—à—Ç–µ–≥—É\n"
        "/all_notes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –∏ start)."""
    await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–º–µ—Ç–æ–∫, –∏–∑–≤–ª–µ–∫–∞—è —Ö—ç—à—Ç–µ–≥–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    message_text = update.message.text

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏
    hashtags = re.findall(r'#(\w+)', message_text)
    hashtags_str = ' '.join(hashtags).lower() if hashtags else None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú)
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏—â–µ—Ç "@–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú"
    reminder_match = re.search(r'@(\d{2}-\d{2}-\d{4})\s+(\d{2}:\d{2})', message_text)
    reminder_date = None
    if reminder_match:
        # –ì—Ä—É–ø–ø–∞ 1: –¥–∞—Ç–∞ (–î–î-–ú–ú-–ì–ì–ì–ì), –ì—Ä—É–ø–ø–∞ 2: –≤—Ä–µ–º—è (–ß–ß:–ú–ú)
        date_str = reminder_match.group(1) 
        time_str = reminder_match.group(2)
        try:
            full_datetime_str = f"{date_str} {time_str}"
            reminder_date = datetime.strptime(full_datetime_str, '%d-%m-%Y %H:%M')
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú.")
            return
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 9 —É—Ç—Ä–∞)
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã "@–î–î-–ú–ú-–ì–ì–ì–ì"
        date_only_match = re.search(r'@(\d{2}-\d{2}-\d{4})', message_text)
        if date_only_match:
            date_str = date_only_match.group(1)
            try:
                reminder_date = datetime.strptime(date_str, '%d-%m-%Y').replace(hour=9, minute=0)
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ @–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú.")
                return

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, —É–¥–∞–ª—è—è —Ö—ç—à—Ç–µ–≥–∏ –∏ —á–∞—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    note_text = re.sub(r'#\w+', '', message_text).strip()
    if reminder_match:
        note_text = note_text.replace(reminder_match.group(0), '').strip()
    elif date_only_match:
        note_text = note_text.replace(date_only_match.group(0), '').strip()

    if not note_text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_note(user_id, note_text, hashtags_str, reminder_date)
    response_text = "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
    if hashtags_str:
        response_text += f"\n–•—ç—à—Ç–µ–≥–∏: {hashtags_str.replace(' ', ', #')}"
    if reminder_date:
        response_text += f"\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {reminder_date.strftime('%H:%M %d-%m-%Y')}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì

    await update.message.reply_text(response_text)

async def find_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞."""
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /find #–≤–∞–∂–Ω–æ")
        return

    hashtag = context.args[0].lower()
    if not hashtag.startswith('#'):
        await update.message.reply_text("–•—ç—à—Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '#'. –ü—Ä–∏–º–µ—Ä: /find #–≤–∞–∂–Ω–æ")
        return
    
    search_hashtag = hashtag[1:] # –£–¥–∞–ª—è–µ–º '#' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    notes = find_notes_by_user_and_hashtag(user_id, search_hashtag)

    if notes:
        response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ö—ç—à—Ç–µ–≥—É '{hashtag}':\n"
        for i, note in enumerate(notes):
            response += f"{i+1}. {note.text}"
            if note.hashtags:
                response += f" (# {note.hashtags.replace(' ', ', #')})"
            if note.reminder_date:
                response += f" (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note.reminder_date.strftime('%H:%M %d-%m-%Y')})" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì
            response += "\n"
    else:
        response = f"–ó–∞–º–µ—Ç–æ–∫ –ø–æ —Ö—ç—à—Ç–µ–≥—É '{hashtag}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await update.message.reply_text(response)

async def all_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏, —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    notes = get_all_notes_for_user(user_id)

    if notes:
        response = "–í—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
        for i, note in enumerate(notes):
            response += f"{i+1}. {note.text}"
            if note.hashtags:
                response += f" (# {note.hashtags.replace(' ', ', #')})"
            if note.reminder_date:
                response += f" (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note.reminder_date.strftime('%H:%M %d-%m-%Y')})" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì
            response += "\n"
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")


# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---

async def check_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å
    –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è),
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª Telegram.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    reminders = get_upcoming_reminders()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    channel_id = os.environ.get("TELEGRAM_CHANNEL_ID")
    if not channel_id:
        logger.error("TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.")
        return

    for note in reminders:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.
            await context.bot.send_message(
                chat_id=channel_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{note.text}' –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {note.reminder_date.strftime('%H:%M %d-%m-%Y')}."
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note.id}")
            
            # –û–±–Ω—É–ª—è–µ–º reminder_date –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.
            update_note_reminder_date(note.id)
            logger.info(f"–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note.id} –æ–±–Ω—É–ª–µ–Ω–∞.")

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –∏ Flask-–≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not BOT_TOKEN:
        raise Exception("TELEGRAM_BOT_TOKEN environment variable is not set! Please set it.")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000 –¥–ª—è Render)
    PORT = int(os.environ.get("PORT", 10000))

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application Telegram-–±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("find", find_notes_command))
    application.add_handler(CommandHandler("all_notes", all_notes_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JobQueue –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
    job_queue = application.job_queue
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
    job_queue.run_repeating(check_reminders, interval=300, first=0) 

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask-–≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_flask_server():
        print(f"Starting Flask web server on port {PORT}...")
        # debug=False –∏ use_reloader=False –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥
        web_app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –ø–æ—Ç–æ–∫–µ-–¥–µ–º–æ–Ω–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –±–æ—Ç–∞
    flask_thread = threading.Thread(target=run_flask_server)
    flask_thread.daemon = True 
    flask_thread.start()

    print("Starting Telegram bot...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º long polling.
    # drop_pending_updates=True –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è
    # –æ—Ñ—Ñ–ª–∞–π–Ω –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()