import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import re
from datetime import datetime, timedelta
from database import add_note, find_notes_by_user_and_hashtag, get_upcoming_reminders, get_all_notes_for_user
import asyncio
import os
from flask import Flask, request
import threading

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
web_app = Flask(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç /health, –∫–æ—Ç–æ—Ä—ã–π Render –±—É–¥–µ—Ç "–ø–∏–Ω–≥–æ–≤–∞—Ç—å"
@web_app.route('/health')
def health_check():
    return 'OK', 200 # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "OK" –∏ —Å—Ç–∞—Ç—É—Å 200 (—É—Å–ø–µ—à–Ω–æ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger(__name__).setLevel(logging.INFO) # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ü–æ–∫–∞ —á—Ç–æ —è –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. "
        "–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç. "
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π #—Ö–µ—à—Ç–µ–≥. "
        "–î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç '—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ #—Ç–µ–≥ #–¥—Ä—É–≥–æ–π_—Ç–µ–≥ @2025-12-31 10:00'.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/find #—Ö–µ—à—Ç–µ–≥ - –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ö–µ—à—Ç–µ–≥—É\n"
        "/all_notes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_text = update.message.text

    hashtags = re.findall(r'#(\w+)', message_text)
    hashtags_str = ' '.join(hashtags).lower() if hashtags else None

    reminder_match = re.search(r'@(\d{2}:\d{2})\s+(\d{2}-\d{2}-\d{4})', message_text)
    reminder_date = None
    if reminder_match:
        time_str = reminder_match.group(1)
        date_str = reminder_match.group(2)
        try:
            full_datetime_str = f"{date_str} {time_str}"
            reminder_date = datetime.strptime(full_datetime_str, '%d-%m-%Y %H:%M')
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì.")
            return
    else:
        date_only_match = re.search(r'@(\d{2}-\d{2}-\d{4})', message_text)
        if date_only_match:
            date_str = date_only_match.group(1)
            try:
                reminder_date = datetime.strptime(date_str, '%d-%m-%Y').replace(hour=9, minute=0)
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ @–ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì.")
                return

    note_text = re.sub(r'#\w+', '', message_text).strip()
    if reminder_match:
        note_text = note_text.replace(reminder_match.group(0), '').strip()
    elif date_only_match:
        note_text = note_text.replace(date_only_match.group(0), '').strip()

    if not note_text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
        return

    add_note(user_id, note_text, hashtags_str, reminder_date)
    response_text = "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
    if hashtags_str:
        response_text += f"\n–•—ç—à—Ç–µ–≥–∏: {hashtags_str.replace(' ', ', #')}"
    if reminder_date:
        response_text += f"\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {reminder_date.strftime('%H:%M %d-%m-%Y')}"

    await update.message.reply_text(response_text)

async def find_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /find #–≤–∞–∂–Ω–æ")
        return

    hashtag = context.args[0].lower()
    if not hashtag.startswith('#'):
        await update.message.reply_text("–•—ç—à—Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '#'. –ü—Ä–∏–º–µ—Ä: /find #–≤–∞–∂–Ω–æ")
        return

    search_hashtag = hashtag[1:]

    notes = find_notes_by_user_and_hashtag(user_id, search_hashtag)

    if notes:
        response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ö—ç—à—Ç–µ–≥—É '{hashtag}':\n"
        for i, note in enumerate(notes):
            response += f"{i+1}. {note.text}"
            if note.hashtags:
                response += f" (# {note.hashtags.replace(' ', ', #')})"
            if note.reminder_date:
                response += f" (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note.reminder_date.strftime('%Y-%m-%d %H:%M')})"
            response += "\n"
    else:
        response = f"–ó–∞–º–µ—Ç–æ–∫ –ø–æ —Ö—ç—à—Ç–µ–≥—É '{hashtag}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await update.message.reply_text(response)

async def all_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    notes = get_all_notes_for_user(user_id)

    if notes:
        response = "–í—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
        for i, note in enumerate(notes):
            response += f"{i+1}. {note.text}"
            if note.hashtags:
                response += f" (# {note.hashtags.replace(' ', ', #')})"
            if note.reminder_date:
                response += f" (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note.reminder_date.strftime('%Y-%m-%d %H:%M')})"
            response += "\n"
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def check_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    reminders = get_upcoming_reminders()

    for note in reminders:
        try:
            await context.bot.send_message(
                chat_id=note.user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{note.text}' –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {note.reminder_date.strftime('%Y-%m-%d %H:%M')}."
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {note.user_id} –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note.id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {note.user_id}: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ Flask-—Å–µ—Ä–≤–µ—Ä."""
    BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not BOT_TOKEN:
        raise Exception("TELEGRAM_BOT_TOKEN environment variable is not set! Please set it.")

    PORT = int(os.environ.get("PORT", 10000))

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("find", find_notes_command))
    application.add_handler(CommandHandler("all_notes", all_notes_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    job_queue = application.job_queue
    job_queue.run_repeating(check_reminders, interval=600, first=0)

    def run_flask_server():
        print(f"Starting Flask web server on port {PORT}...")
        web_app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

    flask_thread = threading.Thread(target=run_flask_server)
    flask_thread.start()

    print("Starting Telegram bot...")
    # =========================================================================
    # –í–†–ï–ú–ï–ù–ù–´–ô –ö–û–î –î–õ–Ø –û–ß–ò–°–¢–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø TELEGRAM API
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    # –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ Conflict.
    # =========================================================================
    async def one_time_cleanup():
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        loop = asyncio.get_event_loop()
        if not loop.is_running():
            # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å await
            # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é
            # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å application.run_polling(clean=True) –±–µ–∑ —ç—Ç–æ–≥–æ
            logger.warning("Asyncio event loop is not running. Cannot perform webhook cleanup.")
            return

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫.
            # –≠—Ç–æ —á–∞—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ polling –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Telegram.
            await application.bot.delete_webhook()
            logger.info("Successfully deleted any lingering webhooks.")
        except Exception as e:
            logger.error(f"Failed to delete webhook: {e}")

        # –¢–∞–∫–∂–µ, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã
        # (—ç—Ç–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç drop_pending_updates=True, –Ω–æ —è–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç)
        # await application.updater.start_polling(drop_pending_updates=True, clean=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç—É –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ application.run_polling() –≤–æ–∑—å–º–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º
    # –ú—ã –ù–ï –ú–û–ñ–ï–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run() –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ application.run_polling()
    # —Å–æ–∑–¥–∞—Å—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–∏–∫–ª.
    # –õ—É—á—à–∏–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `clean=True` –≤ `run_polling` –∫–∞–∫ –º—ã —É–∂–µ –¥–µ–ª–∞–ª–∏.
    # –ï—Å–ª–∏ `clean=True` –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, —Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ Render, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç
    # –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ.
    #
    # –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë –æ–¥–Ω—É –≤–µ—â—å, –µ—Å–ª–∏ clean=True –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ:
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ application.run_polling() - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ.
    # –ò –ø–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å "Deploy Clear Cache & Deploy" –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å "hard reset" –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram
    # (–Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –∏ —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ).

    # –í–µ—Ä–Ω–µ–º—Å—è –∫ —Å–∞–º–æ–º—É –Ω–∞–¥–µ–∂–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É –±–µ–∑ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–π:
    # application.run_polling —Å–∞–º –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –∑–∞–ø—É—Å–∫–µ —Ü–∏–∫–ª–∞ –∏ –æ—á–∏—Å—Ç–∫–µ.
    # –ï—Å–ª–∏ Conflict persist, —Ç–æ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ Render.
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()