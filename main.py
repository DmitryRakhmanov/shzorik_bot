import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import re
from datetime import datetime, timedelta
from database import add_note, find_notes_by_user_and_hashtag, get_upcoming_reminders, get_all_notes_for_user, update_note_reminder_date
import asyncio # <--- Make sure this is imported
import os
from flask import Flask, request
import threading

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è Render.com)
web_app = Flask(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@web_app.route('/health')
def health_check():
    """–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è Render.com, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å."""
    return 'OK', 200

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger(__name__).setLevel(logging.INFO)
logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.effective_message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. "
        "–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç. "
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π #—Ö–µ—à—Ç–µ–≥. "
        "–î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: '—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ #—Ç–µ–≥ #–¥—Ä—É–≥–æ–π_—Ç–µ–≥ @–ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì'.\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –∫–∞–Ω–∞–ª, **–∑–∞ 24 —á–∞—Å–∞ –¥–æ —Å–æ–±—ã—Ç–∏—è**.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/find #—Ö–µ—à—Ç–µ–≥ - –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ö–µ—à—Ç–µ–≥—É (–¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n"
        "/all_notes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n"
        "/upcoming_notes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¥–ª—è –∫–∞–Ω–∞–ª–∞)\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ/–≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞. User ID: {update.message.from_user.id}, Chat ID: {update.message.chat_id}")
        message_obj = update.message
    elif update.channel_post:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞. Channel ID: {update.channel_post.chat_id}")
        message_obj = update.channel_post
    else:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–æ –Ω–∏ message, –Ω–∏ channel_post –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_id = message_obj.from_user.id if message_obj.from_user else None
    
    message_text = message_obj.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–µ—Å–ª–∏ –µ—Å—Ç—å) / –∏–∑ —á–∞—Ç–∞ {message_obj.chat_id}: '{message_text}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–æ—à–ª–æ —á–µ—Ä–µ–∑ MessageHandler)
    if message_obj.text and message_obj.text.startswith('/'):
        logger.warning(f"MessageHandler –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É: '{message_text}'. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ handle_message.")
        return 

    hashtags_str = None
    reminder_date = None
    reminder_string_found = None

    full_datetime_pattern = r'\s*@(\d{2}:\d{2})\s+(\d{2}-\d{2}-\d{4})'
    full_datetime_match = re.search(full_datetime_pattern, message_text, re.DOTALL)

    if full_datetime_match:
        time_str = full_datetime_match.group(1)
        date_str = full_datetime_match.group(2)
        try:
            reminder_date = datetime.strptime(f"{date_str} {time_str}", '%d-%m-%Y %H:%M')
            reminder_string_found = full_datetime_match.group(0)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {e}")
            await message_obj.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì.")
            return
    else:
        date_only_pattern = r'\s*@(\d{2}-\d{2}-\d{4})'
        date_only_match = re.search(date_only_pattern, message_text, re.DOTALL)
        if date_only_match:
            date_str = date_only_match.group(1)
            try:
                reminder_date = datetime.strptime(date_str, '%d-%m-%Y').replace(hour=9, minute=0)
                reminder_string_found = date_only_match.group(0)
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã: {e}")
                await message_obj.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ @–ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì.")
                return

    cleaned_text = message_text
    if reminder_string_found:
        cleaned_text = re.sub(re.escape(reminder_string_found), '', cleaned_text).strip()
    
    hashtags = re.findall(r'#(\w+)', cleaned_text)
    hashtags_str = ' '.join(hashtags).lower() if hashtags else None

    note_text = re.sub(r'#\w+', '', cleaned_text).strip()

    if not note_text:
        await message_obj.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
        return

    add_note(user_id, note_text, hashtags_str, reminder_date)
    response_text = "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
    if hashtags_str:
        response_text += f"\n–•—ç—à—Ç–µ–≥–∏: {hashtags_str.replace(' ', ', #')}"
    if reminder_date:
        response_text += f"\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {reminder_date.strftime('%H:%M %d-%m-%Y')}"

    await message_obj.reply_text(response_text)


async def find_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_obj = update.effective_message
    if not context.args:
        await message_obj.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /find #–≤–∞–∂–Ω–æ")
        return

    hashtag = context.args[0].lower()
    if not hashtag.startswith('#'):
        await message_obj.reply_text("–•—ç—à—Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '#'. –ü—Ä–∏–º–µ—Ä: /find #–≤–∞–∂–Ω–æ")
        return
    
    search_hashtag = hashtag[1:]

    notes = find_notes_by_user_and_hashtag(user_id, search_hashtag)

    if notes:
        response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ö—ç—à—Ç–µ–≥—É '{hashtag}':\n"
        for i, note in enumerate(notes):
            response += f"{i+1}. {note.text}"
            if note.hashtags:
                response += f" (# {note.hashtags.replace(' ', ', #')})"
            if note.reminder_date:
                response += f" (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note.reminder_date.strftime('%H:%M %d-%m-%Y')})"
            response += "\n"
    else:
        response = f"–ó–∞–º–µ—Ç–æ–∫ –ø–æ —Ö—ç—à—Ç–µ–≥—É '{hashtag}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await message_obj.reply_text(response)

async def all_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_obj = update.effective_message
    notes = get_all_notes_for_user(user_id)

    if notes:
        response = "–í—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
        for i, note in enumerate(notes):
            response += f"{i+1}. {note.text}"
            if note.hashtags:
                response += f" (# {note.hashtags.replace(' ', ', #')})"
            if note.reminder_date:
                response += f" (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note.reminder_date.strftime('%H:%M %d-%m-%Y')})"
            response += "\n"
    else:
        await message_obj.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

async def upcoming_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /upcoming_notes.")
    message_obj = update.effective_message
    notes = get_upcoming_reminders()

    if notes:
        response = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        for i, note in enumerate(notes):
            if note.reminder_date:
                formatted_date = note.reminder_date.strftime('%H:%M %d-%m-%Y')
                response += f"{i+1}. {note.text} (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {formatted_date})"
                if note.hashtags:
                    response += f" (# {note.hashtags.replace(' ', ', #')})"
                response += "\n"
        if len(response) > 4000:
             response = response[:3900] + "\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫)"
    else:
        response = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."

    await message_obj.reply_text(response)

# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---

async def check_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    reminders = get_upcoming_reminders()
    
    channel_id = os.environ.get("TELEGRAM_CHANNEL_ID")
    if not channel_id:
        logger.error("TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.")
        return

    for note in reminders:
        try:
            if note.reminder_date:
                await context.bot.send_message(
                    chat_id=channel_id,
                    text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{note.text}' –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {note.reminder_date.strftime('%H:%M %d-%m-%Y')}."
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note.id}")
                
                update_note_reminder_date(note.id)
                logger.info(f"–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note.id} –æ–±–Ω—É–ª–µ–Ω–∞.")

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_telegram_bot(application: Application) -> None:
    print("Starting Telegram bot polling in a separate thread...")
    # Create a new event loop for this thread and set it as the current one
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    # Run the polling operation within the new event loop
    loop.run_until_complete(application.run_polling(drop_pending_updates=True))
    # Close the loop when done (though it typically runs indefinitely)
    loop.close()

def main() -> None:
    BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not BOT_TOKEN:
        raise Exception("TELEGRAM_BOT_TOKEN environment variable is not set! Please set it.")

    PORT = int(os.environ.get("PORT", 10000))

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("find", find_notes_command))
    application.add_handler(CommandHandler("all_notes", all_notes_command))
    application.add_handler(CommandHandler("upcoming_notes", upcoming_notes_command))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ALL, handle_message))

    job_queue = application.job_queue
    job_queue.run_repeating(check_reminders, interval=30, first=0) 

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    telegram_thread = threading.Thread(target=run_telegram_bot, args=(application,))
    telegram_thread.daemon = True 
    telegram_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    # –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ Health Check –∑–∞–ø—Ä–æ—Å—ã Render.com
    print(f"Starting Flask web server on port {PORT} in main thread...")
    web_app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

if __name__ == '__main__':
    main()