```python
# send_reminders.py
import os
import logging
import datetime
from datetime import timezone
from zoneinfo import ZoneInfo

from telegram import Bot
from database import get_upcoming_reminders_window, mark_reminder_sent

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
logging.basicConfig(level=LOG_LEVEL)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_TOKEN')
CHANNEL_ID_RAW = os.environ.get('TELEGRAM_CHANNEL_ID')  # '-100...' –∏–ª–∏ '@channelusername'

if not BOT_TOKEN:
    logger.error("TELEGRAM_TOKEN environment variable is not set")
    raise SystemExit(1)
if not CHANNEL_ID_RAW:
    logger.error("TELEGRAM_CHANNEL_ID environment variable is not set")
    raise SystemExit(1)

bot = Bot(BOT_TOKEN)

# –¢–∞–π–º–∑–æ–Ω—ã
tz_name = os.environ.get('TZ', 'Europe/Moscow')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Europe/Moscow (UTC+3)
DISPLAY_TZ = ZoneInfo(tz_name)  # –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
UTC = timezone.utc

def parse_channel_id(raw: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç int –µ—Å–ª–∏ raw –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π id (-100...), –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä @channelusername).
    """
    raw = raw.strip()
    if raw.startswith('@'):
        return raw
    try:
        return int(raw)
    except ValueError:
        return raw

def to_display_time(dt_utc):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç datetime (–º–æ–∂–µ—Ç –±—ã—Ç—å naive –∏–ª–∏ aware). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ DISPLAY_TZ.
    """
    if dt_utc is None:
        return ""
    if dt_utc.tzinfo is None:
        dt_utc = dt_utc.replace(tzinfo=UTC)
    dt_local = dt_utc.astimezone(DISPLAY_TZ)
    return dt_local.strftime('%H:%M %d-%m-%Y')

def main():
    # –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏: —Å–µ–π—á–∞—Å (UTC) .. +24 —á–∞—Å–∞
    now_utc = datetime.datetime.now(tz=UTC)
    upper_utc = now_utc + datetime.timedelta(hours=24)

    logger.info("Checking reminders in window: %s -> %s", now_utc.isoformat(), upper_utc.isoformat())

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ database.get_upcoming_reminders_window
    reminders = get_upcoming_reminders_window(now_utc, upper_utc)

    if not reminders:
        logger.info("No reminders found in the next 24 hours.")
        return

    channel_id = parse_channel_id(CHANNEL_ID_RAW)

    for note in reminders:
        try:
            display_time = to_display_time(note.reminder_date)
            text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{note.text}' –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {display_time}."
            logger.info("Sending reminder for note id=%s: %s", note.id, text)
            bot.send_message(chat_id=channel_id, text=text)
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            ok = mark_reminder_sent(note.id)
            if ok:
                logger.info("Marked note id=%s as sent.", note.id)
            else:
                logger.warning("Could not mark note id=%s as sent (note not found).", note.id)
        except Exception as ex:
            logger.exception("Failed to send reminder for note id=%s: %s", getattr(note, 'id', '<unknown>'), ex)

if __name__ == '__main__':
    main()
```