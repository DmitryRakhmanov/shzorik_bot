# send_reminders.py
import os
import logging
import datetime
from datetime import timezone
from zoneinfo import ZoneInfo

from telegram import Bot
from database import get_upcoming_reminders_window, mark_reminder_sent

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO').upper()
logging.basicConfig(level=LOG_LEVEL)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
CHANNEL_ID_RAW = os.environ.get('TELEGRAM_CHANNEL_ID')
DATABASE_URL = os.environ.get('DATABASE_URL')
TZ_NAME = os.environ.get('TZ', 'Europe/Moscow')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
missing_vars = []
if not BOT_TOKEN:
    missing_vars.append('TELEGRAM_BOT_TOKEN')
if not CHANNEL_ID_RAW:
    missing_vars.append('TELEGRAM_CHANNEL_ID')
if not DATABASE_URL:
    missing_vars.append('DATABASE_URL')

if missing_vars:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ', '.join(missing_vars))
    raise SystemExit(1)

bot = Bot(BOT_TOKEN)
DISPLAY_TZ = ZoneInfo(TZ_NAME)
UTC = timezone.utc

def parse_channel_id(raw: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç int –µ—Å–ª–∏ raw –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π id (-100...), –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä @channelusername).
    """
    raw = raw.strip()
    if raw.startswith('@'):
        return raw
    try:
        return int(raw)
    except ValueError:
        return raw

def to_display_time(dt_utc):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç datetime (–º–æ–∂–µ—Ç –±—ã—Ç—å naive –∏–ª–∏ aware). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ DISPLAY_TZ.
    """
    if dt_utc is None:
        return ""
    if dt_utc.tzinfo is None:
        dt_utc = dt_utc.replace(tzinfo=UTC)
    dt_local = dt_utc.astimezone(DISPLAY_TZ)
    return dt_local.strftime('%H:%M %d-%m-%Y')

def main():
    now_utc = datetime.datetime.now(tz=UTC)
    upper_utc = now_utc + datetime.timedelta(hours=24)

    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ–∫–Ω–µ: %s -> %s", now_utc.isoformat(), upper_utc.isoformat())

    try:
        reminders = get_upcoming_reminders_window(now_utc, upper_utc)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %s", e)
        return

    if not reminders:
        logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    channel_id = parse_channel_id(CHANNEL_ID_RAW)

    for note in reminders:
        try:
            display_time = to_display_time(note.reminder_date)
            text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{note.text}' –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {display_time}."
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è note id=%s: %s", note.id, text)
            bot.send_message(chat_id=channel_id, text=text)
            # –ü–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
            ok = mark_reminder_sent(note.id)
            if ok:
                logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ note id=%s –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ.", note.id)
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å note id=%s –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ).", note.id)
        except Exception as ex:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è note id=%s: %s", getattr(note, 'id', '<unknown>'), ex)

if __name__ == '__main__':
    main()
