import os
import re
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
#from database import init_db, add_note, get_upcoming_reminders_window, mark_reminder_sent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")
TELEGRAM_CHANNEL_ID = int(os.environ.get("TELEGRAM_CHANNEL_ID", 0))  # –î–ª—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET_TOKEN")
WEBHOOK_PORT = int(os.environ.get("PORT", 10000))
USE_WEBHOOK = os.environ.get("USE_WEBHOOK", 'false').lower() in ('true', '1', 't')

if not BOT_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

if USE_WEBHOOK and not all([WEBHOOK_URL, WEBHOOK_SECRET, WEBHOOK_PORT]):
    raise ValueError("–ü—Ä–∏ USE_WEBHOOK=true, WEBHOOK_URL, WEBHOOK_SECRET_TOKEN –∏ PORT –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
logger.info("Database initialized.")

# –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def parse_reminder(text: str):
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ö—ç—à—Ç–µ–≥–∞—Ö
    hashtags = re.findall(r"#[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9_]+", text)
    dt_match = re.search(r"@(\d{2}:\d{2}) (\d{2}-\d{2}-\d{4})", text)
    reminder_date = None
    if dt_match:
        time_str, date_str = dt_match.groups()
        try:
            reminder_date = datetime.strptime(f"{date_str} {time_str}", "%d-%m-%Y %H:%M")
            reminder_date = reminder_date.replace(tzinfo=ZoneInfo("Europe/Moscow"))
        except ValueError:
            return text, " ".join(hashtags), None  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    return text, hashtags, reminder_date  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ hashtags –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–∏–∂–µ)
async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    cleaned_text, hashtags, reminder_date = parse_reminder(text)
    if "#–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" not in hashtags or reminder_date is None:
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å #–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @HH:MM DD-MM-YYYY.")
        return
    note = add_note(user_id, cleaned_text, " ".join(hashtags), reminder_date)
    reply = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: '{note.text}' –Ω–∞ {note.reminder_date.astimezone(ZoneInfo('Europe/Moscow')).strftime('%H:%M %d-%m-%Y')}"
    await update.message.reply_text(reply)
    logger.info(f"Saved reminder: {note.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post:
        return
    text = update.channel_post.text
    channel_id = update.channel_post.chat.id
    cleaned_text, hashtags, reminder_date = parse_reminder(text)
    if "#–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" not in hashtags or reminder_date is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
    note = add_note(channel_id, cleaned_text, " ".join(hashtags), reminder_date)
    reply = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: '{note.text}' –Ω–∞ {note.reminder_date.astimezone(ZoneInfo('Europe/Moscow')).strftime('%H:%M %d-%m-%Y')}"
    await update.channel_post.reply_text(reply)
    logger.info(f"Saved reminder from channel: {note.text}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª—è—é –æ –Ω–∏—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upcoming –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å
    /upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π

    –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–∞–Ω–∞–ª–æ–º: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å #–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ @HH:MM DD-MM-YYYY, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ –∏–ª–∏ —Ä–∞–Ω—å—à–µ.
    """
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ)
async def upcoming_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(ZoneInfo("Europe/Moscow"))
    notes = get_upcoming_reminders_window(now, now + timedelta(days=30), only_unsent=False)  # –†–∞—Å—à–∏—Ä–∏–ª–∏ –Ω–∞ 30 –¥–Ω–µ–π
    if not notes:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π.")
        return
    messages = []
    for note in notes:
        reminder_date_moscow = note.reminder_date.astimezone(ZoneInfo("Europe/Moscow"))
        messages.append(
            f"üîî {note.text} - –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {reminder_date_moscow.strftime('%H:%M %d-%m-%Y')} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {'–¥–∞' if note.reminder_sent else '–Ω–µ—Ç'})"
        )
    await update.message.reply_text("\n".join(messages))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ (–≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç note.user_id)
async def check_reminders():
    now = datetime.now(ZoneInfo("Europe/Moscow"))
    upcoming = get_upcoming_reminders_window(now, now + timedelta(days=1))
    for note in upcoming:
        try:
            reminder_date_moscow = note.reminder_date.astimezone(ZoneInfo("Europe/Moscow"))
            await application.bot.send_message(
                chat_id=note.user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{note.text}' –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {reminder_date_moscow.strftime('%H:%M %d-%m-%Y')}"
            )
            mark_reminder_sent(note.id)
            logger.info(f"Sent reminder: {note.text}")
        except Exception as e:
            logger.error(f"Failed to send reminder: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application = Application.builder().token(BOT_TOKEN).build()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤)
# application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, handle_private_message))

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.CHANNEL, handle_channel_post))

# –ö–æ–º–∞–Ω–¥—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏)
application.add_handler(CommandHandler("start", start_command, filters=filters.ChatType.PRIVATE))
application.add_handler(CommandHandler("help", help_command, filters=filters.ChatType.PRIVATE))
application.add_handler(CommandHandler("upcoming", upcoming_notes_command, filters=filters.ChatType.PRIVATE))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ APScheduler
scheduler = AsyncIOScheduler()
scheduler.add_job(check_reminders, "interval", minutes=1)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç USE_WEBHOOK
if __name__ == "__main__":
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if USE_WEBHOOK:
        logger.info("Starting bot with webhooks...")
        application.run_webhook(
            listen="0.0.0.0",
            port=WEBHOOK_PORT,
            url_path="/telegram",
            webhook_url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET
        )
    else:
        logger.info("Starting bot with polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)